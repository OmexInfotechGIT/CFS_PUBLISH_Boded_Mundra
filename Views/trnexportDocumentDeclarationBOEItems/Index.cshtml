@model CFS.Models.trnexportDocumentDeclarationBOEItems

@{

    if (Model.doaction == "edit")
    {
        ViewBag.Title = "Update BOE Items";
        if (!ViewBag.gblBlnEdit)
        {
            Response.Redirect(CFS.Com.ClsCommon.GetRootPath() + "Error/unauthorize/");
        }
    }
    else if(Model.doaction == "view")
    {
        ViewBag.Title = "View BOE Items";
        //if (!ViewBag.gblBlnView)
        //{
        //    Response.Redirect(CFS.Com.ClsCommon.GetRootPath() + "Error/unauthorize/");
        //}
    }
    else
    {
        ViewBag.Title = "Add New BOE Items";

    }
    string heading = "";
    System.Text.StringBuilder StrAutocomplete = new System.Text.StringBuilder();
}

<style>
    th, td {
        padding: 3px;
    }

    input, select {
        border: 1px solid #ccc;
        border-radius: 3px;
    }

    .ui-autocomplete {
        z-index: 9999;
    }
</style>
<!-- Main content -->
<section class="">

    @using (Html.BeginForm("Index", "trnexportDocumentDeclarationBOEItems", FormMethod.Post))
    {
        @Html.HiddenFor(Model => Model.trnDocumentGWLotDetailsID)
        @Html.HiddenFor(Model => Model.trnExportDocumentDeclarationGWID)
        @Html.HiddenFor(Model => Model.trnExportDocumentDeclarationGWLotDetailsID)
        @Html.HiddenFor(Model => Model.ModelTruckNo)
        @Html.HiddenFor(Model => Model.ModelBOENo)
        @Html.HiddenFor(Model => Model.ModelGatePassPackages)
        @Html.HiddenFor(Model => Model.ModelGatePassPieces)
        @Html.HiddenFor(Model => Model.ModelGatePassWeight)
        @Html.HiddenFor(Model => Model.type)
        @Html.HiddenFor(Model => Model.SpaceCertificateID)
        @Html.HiddenFor(Model => Model.LOTNO)
        <div class="row" id="step-1">

            <div class="col-xs-12">

                <div class="box">
                    <div class="box-header with-border">
                        <h4>
                            <b>BOE Items</b>

                            <div class="pull-right">
                                <div style="display: inline-flex">
                                    @if (Model.doaction == "view")
                                    {
                                        <a href="@Url.Action("view", "trnExportDocumentDeclarationGW", new { @id = Model.trnExportDocumentDeclarationGWID, @doaction = "view"})" class="btn btn-primary btn-sm" style="color: #fff" data-toggle="tooltip" title="Back to listing"><i class="fa fa-arrow-left"></i></a>
                                    }
                                    else
                                    {
                                        <a href="@Url.Action("Action", "trnExportDocumentDeclarationGW", new { @id = Model.trnExportDocumentDeclarationGWID, @doaction = "edit"})" class="btn btn-primary btn-sm" style="color: #fff" data-toggle="tooltip" title="Back to listing"><i class="fa fa-arrow-left"></i></a>
                                    }
                                </div>

                            </div>
                        </h4>
                    </div>
                    <div class="box-body">
                        <div class="col-md-3">
                            @Html.LabelFor(Model => Model.ModelBOENo) : <span>@Model.ShiipingBillNo</span>
                        </div>
                        <div class="col-md-3">
                            @Html.LabelFor(Model => Model.ModelGatePassPackages) :
                            @*<span>@(Convert.ToDecimal(Model.ModelGatePassPackages).ToString("0"))</span>*@
                        </div>
                        <div class="col-md-3">
                            @Html.LabelFor(Model => Model.ModelGatePassPieces) :
                            @*<span>@(Convert.ToDecimal(Model.ModelGatePassPieces).ToString("0"))</span>*@
                        </div>
                        <div class="col-md-3">
                            @Html.LabelFor(Model => Model.ModelGatePassWeight) :
                            @*<span>@Model.ModelGatePassWeight</span>*@
                        </div>
                        <div class="col-md-3">
                            @Html.Label("Total Area Booked") :
                            <span id="txtBookingArea">@Model.dtAreaDetails.Rows[0]["BookingArea"].ToString()</span>
                        </div>
                        <div class="col-md-3">
                            @Html.Label("Total Area Received") :
                            <span id="txtTotalReceivedArea">@Model.dtAreaDetails.Rows[0]["TotalReceivedArea"].ToString()</span>
                        </div>
                        <div class="col-md-3">
                            @Html.Label("Total Area Released") :
                            <span id="txtTotalOutwadArea">@Model.dtAreaDetails.Rows[0]["TotalOutwadArea"].ToString()</span>
                        </div>
                        <div class="col-md-3">
                            @Html.Label("Total Balance Area") :
                            <span id="txtTotalBalanceArea">@((Convert.ToDecimal(Model.dtAreaDetails.Rows[0]["TotalReceivedArea"].ToString()) - Convert.ToDecimal(Model.dtAreaDetails.Rows[0]["TotalOutwadArea"].ToString())) - Model.AreaRequired)</span>
                        </div>
                        @if (Model.doaction == "view")
                        {
                            <div class="col-md-4">
                                @Html.LabelFor(Model => Model.AreaRequired) : @Model.AreaRequired
                            </div>
                        }
                        else
                        {
                            <div class="col-md-4">
                                @Html.LabelFor(Model => Model.AreaRequired) :  @Html.TextBoxFor(Model => Model.AreaRequired, new { @id = "txtAreaRequired", @name = "txtAreaRequired", @onkeypress = "return isNumberWithTwoDecimal(event,'GrossWeight')" })
                            </div>
                        }
                        <div class="col-md-12" style="border-bottom:1px solid #cdcdcd;margin-bottom: 5px;"></div>
                        <div class="col-md-12" style="overflow-x:scroll">
                            @if (Model != null && Model.MyDatatable != null)
                            {

                                <table id="tblterifftable" style="width: 200%; border: 1px solid #dfdada" border="1">
                                    <thead>

                                        <tr>
                                            <th>SB/BOE Cargo Item</th>
                                            <th>Cargo Name</th>
                                            <th>Item Declare Pkgs</th>
                                            <th>Item Declare Pics</th>
                                            <th>Item Declare Wgt</th>
                                            <th>Rcv. Pkgs</th>
                                            <th>Rcv. Pics</th>
                                            <th>Rcv. Wgt</th>
                                            <th>Out. Pkgs</th>
                                            <th>Out. Pics</th>
                                            <th>Out. Wgt</th>
                                            <th>Bal. Pkgs</th>
                                            <th>Bal. Pics</th>
                                            <th>Bal. Wgt</th>
                                            <th>SB Dec. Pkg.</th>
                                            <th>SB Dec. Pics</th>
                                            <th>SB Dec. Wgt</th>
                                            <th>WH Location</th>
                                            <th>Bill Commodity</th>
                                            <th>Clear</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @{
                                            int count1 = 0;
                                        }

                                        @{
                                            StrAutocomplete.Append(@" <script> setTimeout(function () {");
                                            count1 = Model.MyDatatable.Rows.Count;
                                            Model.Cargodesc = new string[(Model.MyDatatable.Rows.Count + (10 - (Model.MyDatatable.Rows.Count % 10)))];
                                            Model.CargoName = new string[(Model.MyDatatable.Rows.Count + (10 - (Model.MyDatatable.Rows.Count % 10)))];
                                            Model.BookNoOfPackage = new decimal[(Model.MyDatatable.Rows.Count + (10 - (Model.MyDatatable.Rows.Count % 10)))];
                                            Model.BookNoOfPieces = new decimal[(Model.MyDatatable.Rows.Count + (10 - (Model.MyDatatable.Rows.Count % 10)))];
                                            Model.BookWeight = new decimal[(Model.MyDatatable.Rows.Count + (10 - (Model.MyDatatable.Rows.Count % 10)))];
                                            Model.RcvNoOfPackage = new decimal[(Model.MyDatatable.Rows.Count + (10 - (Model.MyDatatable.Rows.Count % 10)))];
                                            Model.RcvNoOfPieces = new decimal[(Model.MyDatatable.Rows.Count + (10 - (Model.MyDatatable.Rows.Count % 10)))];
                                            Model.RcvWeight = new decimal[(Model.MyDatatable.Rows.Count + (10 - (Model.MyDatatable.Rows.Count % 10)))];
                                            Model.TotalOutPackage = new decimal[(Model.MyDatatable.Rows.Count + (10 - (Model.MyDatatable.Rows.Count % 10)))];
                                            Model.TotalOutPieces = new decimal[(Model.MyDatatable.Rows.Count + (10 - (Model.MyDatatable.Rows.Count % 10)))];
                                            Model.TotalOutWeight = new decimal[(Model.MyDatatable.Rows.Count + (10 - (Model.MyDatatable.Rows.Count % 10)))];
                                            Model.RemNoOfPackage = new decimal[(Model.MyDatatable.Rows.Count + (10 - (Model.MyDatatable.Rows.Count % 10)))];
                                            Model.RemNoOfPieces = new decimal[(Model.MyDatatable.Rows.Count + (10 - (Model.MyDatatable.Rows.Count % 10)))];
                                            Model.RemWeight = new decimal[(Model.MyDatatable.Rows.Count + (10 - (Model.MyDatatable.Rows.Count % 10)))];
                                            Model.Package = new decimal[(Model.MyDatatable.Rows.Count + (10 - (Model.MyDatatable.Rows.Count % 10)))];
                                            Model.Pieces = new decimal[(Model.MyDatatable.Rows.Count + (10 - (Model.MyDatatable.Rows.Count % 10)))];
                                            Model.Weight = new decimal[(Model.MyDatatable.Rows.Count + (10 - (Model.MyDatatable.Rows.Count % 10)))];
                                            Model.WHLocation = new string[(Model.MyDatatable.Rows.Count + (10 - (Model.MyDatatable.Rows.Count % 10)))];
                                            Model.WHLocationID = new int[(Model.MyDatatable.Rows.Count + (10 - (Model.MyDatatable.Rows.Count % 10)))];
                                            Model.PackingType = new string[(Model.MyDatatable.Rows.Count + (10 - (Model.MyDatatable.Rows.Count % 10)))];
                                            Model.PackingTypeID = new int[(Model.MyDatatable.Rows.Count + (10 - (Model.MyDatatable.Rows.Count % 10)))];
                                            Model.BillCommodity = new string[(Model.MyDatatable.Rows.Count + (10 - (Model.MyDatatable.Rows.Count % 10)))];
                                            Model.BillCommodityID = new int[(Model.MyDatatable.Rows.Count + (10 - (Model.MyDatatable.Rows.Count % 10)))];
                                            Model.trnDocumentGWBoiItemsID = new int[(Model.MyDatatable.Rows.Count + (10 - (Model.MyDatatable.Rows.Count % 10)))];
                                            Model.trnExportDocumentDeclarationGWLotID = new int[(Model.MyDatatable.Rows.Count + (10 - (Model.MyDatatable.Rows.Count % 10)))];
                                        }

                                        @if (Model.MyDatatable != null && Model.MyDatatable.Rows.Count > 0)
                                        {


                                            for (int Q = 0; Q < Model.MyDatatable.Rows.Count; Q++)
                                            {

                                                Model.Cargodesc[Q] = Model.MyDatatable.Rows[Q]["Cargodesc"].ToString();
                                                Model.CargoName[Q] = Model.MyDatatable.Rows[Q]["CargoName"].ToString();
                                                Model.BookNoOfPackage[Q] = Convert.ToDecimal(Model.MyDatatable.Rows[Q]["BookNoOfPackage"].ToString());
                                                Model.BookNoOfPieces[Q] = Convert.ToDecimal(Model.MyDatatable.Rows[Q]["BookNoOfPieces"]);
                                                Model.BookWeight[Q] = Convert.ToDecimal(Model.MyDatatable.Rows[Q]["BookWeight"]);
                                                Model.RcvNoOfPackage[Q] = Convert.ToDecimal(Model.MyDatatable.Rows[Q]["RcvNoOfPackage"].ToString());
                                                Model.RcvNoOfPieces[Q] = Convert.ToDecimal(Model.MyDatatable.Rows[Q]["RcvNoOfPieces"]);
                                                Model.RcvWeight[Q] = Convert.ToDecimal(Model.MyDatatable.Rows[Q]["RcvWeight"]);
                                                Model.TotalOutPackage[Q] = Convert.ToDecimal(Model.MyDatatable.Rows[Q]["TotalOutPackage"].ToString());
                                                Model.TotalOutPieces[Q] = Convert.ToDecimal(Model.MyDatatable.Rows[Q]["TotalOutPieces"]);
                                                Model.TotalOutWeight[Q] = Convert.ToDecimal(Model.MyDatatable.Rows[Q]["TotalOutWeight"]);
                                                Model.RemNoOfPackage[Q] = Convert.ToDecimal(Model.MyDatatable.Rows[Q]["RemNoOfPackage"].ToString());
                                                Model.RemNoOfPieces[Q] = Convert.ToDecimal(Model.MyDatatable.Rows[Q]["RemNoOfPieces"]);
                                                Model.RemWeight[Q] = Convert.ToDecimal(Model.MyDatatable.Rows[Q]["RemWeight"]);
                                                Model.WHLocation[Q] = Convert.ToString(Model.MyDatatable.Rows[Q]["WHLocation"]);
                                                Model.WHLocationID[Q] = Convert.ToInt32(Model.MyDatatable.Rows[Q]["WHLocationID"]);
                                                Model.PackingType[Q] = Convert.ToString(Model.MyDatatable.Rows[Q]["PackingType"]);
                                                Model.PackingTypeID[Q] = Convert.ToInt32(Model.MyDatatable.Rows[Q]["PackingTypeID"]);
                                                Model.BillCommodity[Q] = Convert.ToString(Model.MyDatatable.Rows[Q]["BillCommodity"]);
                                                Model.BillCommodityID[Q] = Convert.ToInt32(Model.MyDatatable.Rows[Q]["BillCommodityID"]);
                                                Model.trnDocumentGWBoiItemsID[Q] = Convert.ToInt32(Model.MyDatatable.Rows[Q]["trnDocumentGWBoiItemsID"]);

                                                StrAutocomplete.Append(@"  Autocompletebox('WHLocation" + Q + @"', 'WHLocationID" + Q + @"', 'trnTruckDestuffingGW', 'GetLocation');");

                                                if (Model != null && Model.MyGridDatatable != null && Model.MyGridDatatable.Rows.Count > 0)
                                                {
                                                    System.Data.DataView dv = new System.Data.DataView(Model.MyGridDatatable);

                                                    dv.RowFilter = "trnDocumentGWBoiItemsID = '" + Model.trnDocumentGWBoiItemsID[Q] + "'" + " and WHLocationID = '" + Model.WHLocationID[Q] + "'";

                                                    System.Data.DataTable dt = dv.ToTable();

                                                    if (dt != null && dt.Rows.Count > 0)
                                                    {
                                                        Model.AreaRequired = Convert.ToDecimal(dt.Rows[0]["AreaRequired"]);
                                                        Model.Package[Q] = Convert.ToDecimal(dt.Rows[0]["NoOfPackages"]);
                                                        Model.Pieces[Q] = Convert.ToDecimal(dt.Rows[0]["NoOfPieces"]);
                                                        Model.Weight[Q] = Convert.ToDecimal(dt.Rows[0]["Weight"]);
                                                        Model.WHLocation[Q] = Convert.ToString(dt.Rows[0]["WHLocation"]);
                                                        Model.WHLocationID[Q] = Convert.ToInt32(dt.Rows[0]["WHLocationID"]);
                                                        Model.trnExportDocumentDeclarationGWLotID[Q] = Convert.ToInt32(dt.Rows[0]["trnExportDocumentDeclarationGWLotDetailsID"]);
                                                    }
                                                }

                                                <tr>
                                                    <td style="display:none;">@Html.HiddenFor(Model => Model.WHLocationID[Q], new { @id = "WHLocationID" + Q })</td>
                                                    <td style="display:none;">@Html.TextBoxFor(Model => Model.trnDocumentGWBoiItemsID[Q], new { @id = "trnDocumentGWBoiItemsID" + Q })</td>
                                                    <td style="display:none;">@Html.TextBoxFor(Model => Model.trnExportDocumentDeclarationGWLotID[Q], new { @id = "trnExportDocumentDeclarationGWLotDetailsID" + Q })</td>

                                                    <td>@Html.HiddenFor(Model => Model.CargoName[Q], new { @id = "CargoName" + Q, @placeholder = "CargoName", @readonly = "true", @style = "background:#eee;width: 130px;" }) @Model.CargoName[Q]</td>
                                                    <td>@Html.HiddenFor(Model => Model.Cargodesc[Q], new { @id = "Cargodesc" + Q, @placeholder = "Cargodesc", @readonly = "true", @style = "background:#eee;width: 130px;" }) @Model.Cargodesc[Q]</td>
                                                    <td align="right">@Html.HiddenFor(Model => Model.BookNoOfPackage[Q], new { @id = "BookNoOfPackage" + Q, @style = "width: 50px;background:#eee", @readonly = "true" }) @(Convert.ToDecimal(Model.BookNoOfPackage[Q]).ToString("0"))</td>
                                                    <td align="right">@Html.HiddenFor(Model => Model.BookNoOfPieces[Q], new { @id = "BookNoOfPieces" + Q, @placeholder = "BookNoOfPieces", @style = "width: 50px;background:#eee", @readonly = "true" }) @(Convert.ToDecimal(Model.BookNoOfPieces[Q]).ToString("0"))</td>
                                                    <td align="right">@Html.HiddenFor(Model => Model.BookWeight[Q], new { @id = "BookWeight" + Q, @placeholder = "BookWeight", @style = "width: 50px;background:#eee", @readonly = "true" }) @Model.BookWeight[Q]</td>
                                                    <td align="right">@Html.HiddenFor(Model => Model.RcvNoOfPackage[Q], new { @id = "RcvNoOfPackage" + Q, @style = "width: 50px;background:#eee", @readonly = "true" }) @(Convert.ToDecimal(Model.RcvNoOfPackage[Q]).ToString("0"))</td>
                                                    <td align="right">@Html.HiddenFor(Model => Model.RcvNoOfPieces[Q], new { @id = "RcvNoOfPieces" + Q, @placeholder = "RcvNoOfPieces", @style = "width: 50px;background:#eee", @readonly = "true" }) @(Convert.ToDecimal(Model.RcvNoOfPieces[Q]).ToString("0"))</td>
                                                    <td align="right">@Html.HiddenFor(Model => Model.RcvWeight[Q], new { @id = "RcvWeight" + Q, @placeholder = "RcvWeight", @style = "width: 50px;background:#eee", @readonly = "true" }) @Model.RcvWeight[Q]</td>
                                                    <td align="right">@Html.HiddenFor(Model => Model.TotalOutPackage[Q], new { @id = "TotalOutPackage" + Q, @style = "width: 50px;background:#eee", @readonly = "true" }) @(Convert.ToDecimal(Model.TotalOutPackage[Q]).ToString("0"))</td>
                                                    <td align="right">@Html.HiddenFor(Model => Model.TotalOutPieces[Q], new { @id = "TotalOutPieces" + Q, @placeholder = "TotalOutPieces", @style = "width: 50px;background:#eee", @readonly = "true" }) @(Convert.ToDecimal(Model.TotalOutPieces[Q]).ToString("0"))</td>
                                                    <td align="right">@Html.HiddenFor(Model => Model.TotalOutWeight[Q], new { @id = "TotalOutWeight" + Q, @placeholder = "TotalOutWeight", @style = "width: 50px;background:#eee", @readonly = "true" }) @Model.TotalOutWeight[Q]</td>
                                                    <td align="right">@Html.HiddenFor(Model => Model.RemNoOfPackage[Q], new { @id = "RemNoOfPackage" + Q, @style = "width: 50px;background:#eee", @readonly = "true" }) @(Convert.ToDecimal(Model.RemNoOfPackage[Q]).ToString("0"))</td>
                                                    <td align="right">@Html.HiddenFor(Model => Model.RemNoOfPieces[Q], new { @id = "RemNoOfPieces" + Q, @placeholder = "RemNoOfPieces", @style = "width: 50px;background:#eee", @readonly = "true" }) @(Convert.ToDecimal(Model.RemNoOfPieces[Q]).ToString("0"))</td>
                                                    <td align="right">@Html.HiddenFor(Model => Model.RemWeight[Q], new { @id = "RemWeight" + Q, @placeholder = "RemWeight", @style = "width: 50px;background:#eee", @readonly = "true" }) @Model.RemWeight[Q]</td>
                                                    @if (Model.doaction.ToLower() == "view")
                                                    {
                                                        <td>@Model.Package[Q]</td>
                                                        <td>@Model.Pieces[Q]</td>
                                                        <td>@Model.Weight[Q]</td>
                                                        <td>@Model.WHLocation[Q]</td>
                                                    }
                                                    else
                                                    {
                                                        <td>@Html.TextBoxFor(Model => Model.Package[Q], new { @id = "Package" + Q, @class = "calPackage", @style = "width: 50px;", @placeholder = "Package", @onkeypress = "return isNumberWithTwoDecimal(event,'Package" + Q + "')", @onblur = "checkitems('Package','" + Q + "')" })</td>
                                                        <td>@Html.TextBoxFor(Model => Model.Pieces[Q], new { @id = "Pieces" + Q, @class = "calPieces", @placeholder = "Pieces", @style = "width: 50px;", @onkeypress = "return isNumberWithTwoDecimal(event,'Pieces" + Q + "')", @onblur = "checkitems('Pieces','" + Q + "')" })</td>
                                                        <td>@Html.TextBoxFor(Model => Model.Weight[Q], new { @id = "Weight" + Q, @class = "calWeight", @placeholder = "Weight", @style = "width: 50px;", @onkeypress = "return isNumberWithTwoDecimal(event,'Weight" + Q + "')", @onblur = "checkitems('Weight','" + Q + "')" })</td>
                                                        <td>@Html.TextBoxFor(Model => Model.WHLocation[Q], new { @id = "WHLocation" + Q, @placeholder = "WH Location", @style = "width: 100px;" })</td>
                                                    }
                                                    @*<td>@Html.HiddenFor(Model => Model.PackingType[Q], new { @id = "PackingType" + Q, @placeholder = "PackingType", @readonly = "true", @style = "background:#eee;width: 130px;" }) @Model.PackingType[Q]</td>*@
                                                    <td>@Html.HiddenFor(Model => Model.BillCommodity[Q], new { @id = "BillCommodity" + Q, @placeholder = "BillCommodity", @readonly = "true", @style = "background:#eee;width: 130px;" }) @Model.BillCommodity[Q]</td>
                                                    @if (Model.trnExportDocumentDeclarationGWLotID[Q] > 0)
                                                    {
                                                        @*<td><a class="" href="@Url.Action("delete", "trnexportDocumentDeclarationBOEItems", new { id = Model.trnExportDocumentDeclarationGWLotDetailsID[Q], trnDocumentGWLotDetailsID = Model.trnDocumentGWLotDetailsID, trnCargoTruckOutwardCumGatepassID = Model.trnCargoTruckOutwardCumGatepassID, TruckNo = Model.ModelTruckNo, BOENo = Model.ModelBOENo, GatePassNOOFPKGS = Model.ModelGatePassPackages, GatePassNOOFPIECES = Model.ModelGatePassPieces, GatePassWEIGHT = Model.ModelGatePassWeight, type = Model.type , SearchID = Model.searchID, SearchNo = Model.searchNo })" onclick="return confirm('Are you sure want to delete this record?');"><i title="Click to Clear" style="font-size: x-large; cursor: pointer; vertical-align: middle; color:red;" class="fa fa-trash"></i></a></td>*@
                                                    }
                                                    else
                                                    {
                                                        <td><a class="" onclick="ClearGridDate('@Q')"><i title="Click to Clear" style="font-size: x-large; cursor: pointer; vertical-align: middle;" class="fa fa-refresh"></i></a></td>
                                                    }

                                                </tr>
                                            }

                                        }
                                        @{
                                            Model.hdnGridCount = Model.MyDatatable.Rows.Count;

                                        }
                                        @{
                                            StrAutocomplete.Append(@" }, 1000); $('#AreaRequired').val('" + Model.AreaRequired + "');</script> ");
                                        }
                                        @Html.HiddenFor(Model => Model.hdnGridCount, new { @id = "hdnGridCount", @name = "hdnGridCount" })

                                         
                                        <tr>
                                            <td align="right" colspan="2"> <b>Total : </b> </td>
                                             
                                            <td align="right"><b>@(Convert.ToDecimal(Model.BookNoOfPackage[0]).ToString("0"))</b></td>
                                            <td align="right"><b>@(Convert.ToDecimal(Model.BookNoOfPieces[0]).ToString("0"))</b></td>
                                            <td align="right"><b>@(Convert.ToDecimal(Model.BookWeight[0]))</b></td>
                                            <td align="right"><b>@(Convert.ToDecimal(Model.RcvNoOfPackage.Sum()).ToString("0"))</b></td>
                                            <td align="right"><b>@(Convert.ToDecimal(Model.RcvNoOfPieces.Sum()).ToString("0"))</b></td>
                                            <td align="right"><b>@(Convert.ToDecimal(Model.RcvWeight.Sum()))</b></td>
                                            <td align="right"><b>@(Convert.ToDecimal(Model.TotalOutPackage.Sum()).ToString("0"))</b></td>
                                            <td align="right"><b>@(Convert.ToDecimal(Model.TotalOutPieces.Sum()).ToString("0"))</b></td>
                                            <td align="right"><b>@(Convert.ToDecimal(Model.TotalOutWeight.Sum()))</b></td>
                                            <td align="right"><b>@(Convert.ToDecimal(Model.RemNoOfPackage.Sum()).ToString("0"))</b></td>
                                            <td align="right"><b>@(Convert.ToDecimal(Model.RemNoOfPieces.Sum()).ToString("0"))</b></td>
                                            <td align="right"><b>@(Convert.ToDecimal(Model.RemWeight.Sum()))</b></td>
                                            <td align="right" id="ttlpkg">@(Convert.ToDecimal(Model.Package.Sum()).ToString("0"))</td>
                                            <td align="right" id="ttlpcs">@(Convert.ToDecimal(Model.Pieces.Sum()).ToString("0"))</td>
                                            <td align="right" id="ttlwgt">@(Convert.ToDecimal(Model.Weight.Sum()))</td>
                                        </tr>
                                    </tbody>
                                </table>
                            }
                        </div>
                        <div class="col-md-12 box-footer">
                            <div class="pull-right">
                                @if (Model.IsView == false)
                                {
                                    <button type="submit" onclick="return validateForm()" class="btn btn-primary">Submit</button>
                                }

                            </div>
                        </div>

                    </div>
                </div>
            </div>
        </div>

    }

</section>
<script>
    //var doaction = '@Model.doaction';

    $(document).ready(function () {
        debugger;
       // Autocompletebox("ModelEquipmentUsed", "ModelEquipmentUsedID", "trnexportDocumentDeclarion", "GetEquipment");

        $("#txtAreaRequired").blur(function () {
            debugger
            var totalreceivedarea = +$("#txtTotalReceivedArea").text() - +$("#txtTotalOutwadArea").text() - +$("#txtAreaRequired").val();
            $("#txtTotalBalanceArea").text(totalreceivedarea);
        });

       



    });


    function ChangeAllforfields(i) {
        var Package = $("#Package" + i).val();
        var Pieces = $("#Pieces" + i).val();
        var Weight = $("#Weight" + i).val();
        var isneedtoadd = false;
        if (Package > 0 || Pieces > 0 || Weight > 0) {
            isneedtoadd = true;
        }

    }

    function validateForm() {

        var isvalid = true;
        var areareq = $('#txtAreaRequired').val();
        debugger
        if ((areareq == 0 && confirm('Area Outward is Zero, Are you sure want to save this record?')) || areareq > 0) {

        $.ajax({
            url: GetRootPath + "trnexportDocumentDeclarationBOEItems/validateModel",
            type: "Post",
            data: $("form").serialize(),
            dataType: "text",
            async: false,
            success: function (data) {
                $(".redborder").removeClass("redborder");
                if (data != "") {
                    isvalid = false;
                    var Errormsg = data.split("|")[0];
                    var ErrorFields = data.split("|")[1].split(",");

                    if (ErrorFields != null && ErrorFields.length > 0) {
                        for (var Q = 0; Q < ErrorFields.length; Q++) {
                            if (ErrorFields[Q] != "") {
                                $("#" + ErrorFields[Q]).addClass("redborder");
                            }
                        }
                    }
                    if (Errormsg != "") {
                        TosterAlert("error", Errormsg, "Required!");
                    }
                }
            }
        });

        }
        else {
            isvalid = false;
        }

        return isvalid;
    }

    function ClearGridDate(num) {
        $("#Package" + num).val('0');
        $("#Pieces" + num).val('0');
        $("#Weight" + num).val('0');
        $("#WHLocation" + num).val('');
        $("#PackingType" + num).val('');
        $("#BillCommodity" + num).val('');
        $("#Equipment" + num).val('');
        $("#EquipmentID" + num).val('0');
        $("#BillCommodityID" + num).val('0');
        $("#PackingTypeID" + num).val('0');
        $("#WHLocationID" + num).val('0');
    }

    function findTotal(Name, ID) {
        var arr = document.getElementsByClassName(Name);
        var tot = 0;
        for (var i = 0; i < arr.length; i++) {
            if (parseFloat(arr[i].value))
                tot += parseFloat(arr[i].value);
        }
        document.getElementById(ID).innerText = tot;
    }

    function checkitems(type, num) {

        var msg = "";
        var isvalid = true;
        if (type == "Package") {
            var RemNoOfPackage = $("#RemNoOfPackage" + num).val();

            if (RemNoOfPackage == null && RemNoOfPackage == undefined && RemNoOfPackage == "") {
                RemNoOfPackage = 0;
            }
            var Package = $("#Package" + num).val();

            if (Package == null && Package == undefined && Package == "") {
                Package = 0;
            }

            if (parseFloat(RemNoOfPackage) < parseFloat(Package)) {
                $("#Package" + num).val(0);
                msg += "Enter Package is grater then remaining Package";
                isvalid = false;
            }
            findTotal("calPackage", "ttlpkg");
        }
        else if (type == "Pieces") {
            var RemNoOfPieces = $("#RemNoOfPieces" + num).val();

            if (RemNoOfPieces == null && RemNoOfPieces == undefined && RemNoOfPieces == "") {
                RemNoOfPieces = 0;
            }
            var Pieces = $("#Pieces" + num).val();

            if (Pieces == null && Pieces == undefined && Pieces == "") {
                Pieces = 0;
            }

            if (parseFloat(RemNoOfPieces) < parseFloat(Pieces)) {
                $("#Pieces" + num).val(0);
                msg += "Enter Pieces is grater then remaining Pieces";
                isvalid = false;
            }
            findTotal("calPieces", "ttlpcs");
        }
        else if (type == "Weight") {
            var RemWeight = $("#RemWeight" + num).val();

            if (RemWeight == null && RemWeight == undefined && RemWeight == "") {
                RemWeight = 0;
            }
            var Weight = $("#Weight" + num).val();

            if (Weight == null && Weight == undefined && Weight == "") {
                Weight = 0;
            }

            if (parseFloat(RemWeight) < parseFloat(Weight)) {
                $("#Weight" + num).val(0);
                msg += "Enter Weight is grater then remaining Weight";
                isvalid = false;
            }
            findTotal("calWeight", "ttlwgt");
        }
        ChangeAllforfields(num);
        if (!isvalid) {
            TosterAlert("warning", msg, "Warning!");
        }
    }

</script>

@{

    System.Web.HtmlString HtmlDeatails = new HtmlString(StrAutocomplete.ToString());
}
@HtmlDeatails

<style>
    .ui-menu-item {
        font-size: 12px !important;
    }
</style>