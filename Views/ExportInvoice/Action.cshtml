@model CFS.Models.ExportInvoice

@{
    ViewBag.gblBlnView = CFS.Com.ClsCommon.getaccesspage(CFS.Com.ClsCommon.Controller(), CFS.Com.ClsCommon.AccessType.View);
    ViewBag.gblBlnEdit = CFS.Com.ClsCommon.getaccesspage(CFS.Com.ClsCommon.Controller(), CFS.Com.ClsCommon.AccessType.Edit);
    ViewBag.gblBlnAdd = CFS.Com.ClsCommon.getaccesspage(CFS.Com.ClsCommon.Controller(), CFS.Com.ClsCommon.AccessType.Add);
    ViewBag.gblBlnDelete = CFS.Com.ClsCommon.getaccesspage(CFS.Com.ClsCommon.Controller(), CFS.Com.ClsCommon.AccessType.Delete);
    ViewBag.gblBlnApprove = CFS.Com.ClsCommon.getaccesspage(CFS.Com.ClsCommon.Controller(), CFS.Com.ClsCommon.AccessType.Approve);
    ViewBag.gblBlnUnapprove = CFS.Com.ClsCommon.getaccesspage(CFS.Com.ClsCommon.Controller(), CFS.Com.ClsCommon.AccessType.Unapprove);
    bool IsEdit = false;
    if (Model.doaction == "edit")
    {
        IsEdit = true;
        ViewBag.Title = "Update Export Invoice";
        if (!ViewBag.gblBlnEdit && !ViewBag.gblBlnAdd)
        {
            Response.Redirect(CFS.Com.ClsCommon.GetRootPath() + "Error/unauthorize/");
        }
    }
    else
    {
        ViewBag.Title = "Add new Export Invoice";
        if (!ViewBag.gblBlnAdd)
        {
            Response.Redirect(CFS.Com.ClsCommon.GetRootPath() + "Error/unauthorize/");
        }
    }
}
@using System.Globalization;
<style>
    table th, table td {
        padding: 10px;
    }
</style>
@using (Html.BeginForm("Action", "ExportInvoice", FormMethod.Post, new { @id = "frmpost", @name = "frmpost" }))
{
<section class="content">
    <div class="row">
        <div class="box">
            <div class="box-body">                
                <div class="pull-right">
                    <div style="display: inline-flex">
                        <a href="@Url.Action("Index", "ExportInvoice")" class="btn btn-primary btn-sm" style="color: #fff" data-toggle="tooltip" title="Back to listing"><i class="fa fa-arrow-left"></i></a>
                    </div>
                </div>
                <div class="col-md-12"></div>
                <div class="col-md-7">
                    <div class="form-group">
                        @if (!IsEdit)
                        {
                            @Html.LabelFor(Model => Model.SBInvoiceNo, new { @for = "SBInvoiceNo" })<span class="text-red">*</span> @Html.ValidationMessageFor(Model => Model.SBInvoiceNo, String.Empty, new { @id = "spn_trnExportDocumentDeclarationLotDetailsID", @class = "help-inline text-red" })
                            @Html.TextBoxFor(Model => Model.SBInvoiceNo, new { @id = "SBInvoiceNo", @name = "SBInvoiceNo", @class = "form-control", @placeholder = "Select In-BOE No" })
                            @Html.HiddenFor(Model => Model.trnExportStufingWOSBDetailsID, new { @id = "trnExportStufingWOSBDetailsID", @name = "trnExportStufingWOSBDetailsID" })
                        }
                        else
                        {
                            @Html.LabelFor(Model => Model.SBInvoiceNo, new { @for = "SBInvoiceNo" })<span class="text-red">*</span> @Html.ValidationMessageFor(Model => Model.SBInvoiceNo, String.Empty, new { @id = "spn_trnExportDocumentDeclarationLotDetailsID", @class = "help-inline text-red" })
                            @Html.TextBoxFor(Model => Model.SBInvoiceNo, new { @id = "SBInvoiceNo", @name = "SBInvoiceNo", @class = "form-control", @placeholder = "Select In-BOE No", @readonly = true })
                            @Html.HiddenFor(Model => Model.trnExportStufingWOSBDetailsID, new { @id = "trnExportStufingWOSBDetailsID", @name = "trnExportStufingWOSBDetailsID" })
                        }
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="form-group">
                        @Html.LabelFor(Model => Model.SBInvoiceDate, new { @for = "SBInvoiceDate" })
                        @Html.TextBoxFor(Model => Model.SBInvoiceDate, new { @id = "SBInvoiceDate", @name = "SBInvoiceDate", @class = "form-control", @readonly = true })
                    </div>
                </div>
                @if (!IsEdit)
                {
                    <div class="col-md-2">
                        <div class="form-group">
                            <br />
                            @if (!Model.IsSearch)
                            {
                                <button type="button" class="btn btn-primary" onclick="SearchwithSBOrInvoiceNo()">Search</button>
                            }
                            <a href="@Url.Action("index", "ExportInvoice")" class="btn btn-danger">Clear</a>
                        </div>
                    </div>
                }
                @if (Model.IsSearch)
                {
                    @Html.HiddenFor(Model => Model.ExportInvoiceID)
                    @Html.HiddenFor(Model => Model.doaction)
                    @Html.HiddenFor(Model => Model.ExportInvoiceNo)
                    @Html.HiddenFor(Model => Model.trnExportDocumentDeclarationLotDetailsID)
                    @Html.HiddenFor(Model => Model.trnExportStufingWOID)
                    @Html.HiddenFor(Model => Model.FinalTotal)
                    <div class="col-lg-12" style="margin-top:10px;">

                        <div class="col-md-3 form-group">
                            @Html.LabelFor(Model => Model.CHA, new { @for = "CHA" })
                            @Html.TextBoxFor(Model => Model.CHA, new { @id = "CHA", @name = "CHA", @class = "form-control", @readonly = true })
                            @Html.HiddenFor(Model => Model.CHAID, new { @id = "CHAID" })
                        </div>
                        <div class="col-md-2 form-group">
                            @Html.LabelFor(Model => Model.Forwarder, new { @for = "Forwarder" })
                            @Html.TextBoxFor(Model => Model.Forwarder, new { @id = "Forwarder", @name = "Forwarder", @class = "form-control", @readonly = true })
                            @Html.HiddenFor(Model => Model.ForwarderID, new { @id = "ForwarderID" })
                        </div>
                        <div class="col-md-2 form-group">
                            @Html.LabelFor(Model => Model.Consoler, new { @for = "Consoler" })
                            @Html.TextBoxFor(Model => Model.Consoler, new { @id = "Consoler", @name = "Consoler", @class = "form-control", @readonly = true })
                            @Html.HiddenFor(Model => Model.ConsolerID, new { @id = "ConsolerID" })
                        </div>
                        <div class="col-md-2 form-group">
                            @Html.LabelFor(Model => Model.Expoter, new { @for = "Expoter" })
                            @Html.TextBoxFor(Model => Model.Expoter, new { @id = "Expoter", @name = "Expoter", @class = "form-control", @readonly = true })
                            @Html.HiddenFor(Model => Model.ExpoterID, new { @id = "ExpoterID", @name = "ExpoterID" })
                        </div>
                        @if (!IsEdit)
                        {
                            <div class="col-md-3 form-group">
                                @Html.LabelFor(Model => Model.BillToParty, new { @for = "BillToParty" })<span class="text-red">*</span> @Html.ValidationMessageFor(Model => Model.BillToParty, String.Empty, new { @id = "spn_BillToPartyID", @class = "help-inline text-red" })
                                @Html.TextBoxFor(Model => Model.BillToParty, new { @id = "BillToParty", @name = "BillToParty", @class = "form-control", @placeholder = "Select Bill To Party" })
                                @Html.HiddenFor(Model => Model.BillToPartyID, new { @id = "BillToPartyID" })
                            </div>
                            <div class="col-md-4 form-group">
                                @Html.LabelFor(Model => Model.BillToAddress, new { @for = "BillToAddress" })<span class="text-red">*</span> @Html.ValidationMessageFor(Model => Model.BillToAddress, String.Empty, new { @id = "spn_BillToAddressID", @class = "help-inline text-red" })
                                @Html.TextBoxFor(Model => Model.BillToAddress, new { @id = "BillToAddress", @name = "BillToAddress", @class = "form-control", @placeholder = "Select Bill To Address" })
                                @Html.HiddenFor(Model => Model.BillToAddressID, new { @id = "BillToAddressID" })
                            </div>
                        }
                        else
                        {
                            <div class="col-md-3 form-group">
                                @Html.LabelFor(Model => Model.BillToParty, new { @for = "BillToParty" })<span class="text-red">*</span> @Html.ValidationMessageFor(Model => Model.BillToParty, String.Empty, new { @id = "spn_BillToPartyID", @class = "help-inline text-red" })
                                @Html.TextBoxFor(Model => Model.BillToParty, new { @id = "BillToParty", @name = "BillToParty", @class = "form-control", @placeholder = "Select Bill To Party", @Readonly = true })
                                @Html.HiddenFor(Model => Model.BillToPartyID, new { @id = "BillToPartyID" })
                            </div>
                            <div class="col-md-4 form-group">
                                @Html.LabelFor(Model => Model.BillToAddress, new { @for = "BillToAddress" })<span class="text-red">*</span> @Html.ValidationMessageFor(Model => Model.BillToAddress, String.Empty, new { @id = "spn_BillToAddressID", @class = "help-inline text-red" })
                                @Html.TextBoxFor(Model => Model.BillToAddress, new { @id = "BillToAddress", @name = "BillToAddress", @class = "form-control", @placeholder = "Select Bill To Address", @Readonly = true })
                                @Html.HiddenFor(Model => Model.BillToAddressID, new { @id = "BillToAddressID" })
                            </div>
                        }
                        <div class="col-md-2 form-group">
                            @Html.LabelFor(Model => Model.GSTINNo, new { @for = "GSTINNo" })
                            @Html.TextBoxFor(Model => Model.GSTINNo, new { @id = "GSTINNo", @name = "GSTINNo", @class = "form-control", @readonly = true })
                        </div>
                        <div class="col-md-2 form-group">
                            @Html.LabelFor(Model => Model.StateName, new { @for = "StateName" })
                            @Html.TextBoxFor(Model => Model.StateName, new { @id = "StateName", @name = "StateName", @class = "form-control", @readonly = true })
                            @Html.HiddenFor(Model => Model.StateCode, new { @id = "StateCode" })
                            @Html.HiddenFor(Model => Model.StateID, new { @id = "StateID" })
                        </div>
                        <div class="col-md-2 form-group">
                            @Html.LabelFor(Model => Model.SEZStatus, new { @for= "SEZStatus" })
                            @Html.TextBoxFor(Model => Model.SEZStatus, new { @id= "SEZStatus",@name= "SEZStatus",@class= "form-control", @readonly=true})
                        </div>
                        @if (!IsEdit)
                        {
                            <div class="col-md-2 form-group">
                                @Html.LabelFor(Model => Model.PaymentMode, new { @for = "PaymentMode" })
                                @Html.DropDownListFor(Model => Model.PaymentMode, Model.SelectPaymentMode, new { @id = "PaymentMode", @name = "PaymentMode", @class = "form-control" })
                                @Html.HiddenFor(Model => Model.hdnPaymentMode, new { @id = "hdnPaymentMode" })
                            </div>
                        }
                        else
                        {
                            <div class="col-md-2 form-group">
                                @Html.LabelFor(Model => Model.PaymentMode, new { @for = "PaymentMode" })
                                @Html.DropDownListFor(Model => Model.PaymentMode, Model.SelectPaymentMode, new { @id = "PaymentMode", @name = "PaymentMode", @class = "form-control", @style = "pointer-events:none;", disabled = "disabled" })
                                @Html.HiddenFor(Model => Model.hdnPaymentMode, new { @id = "hdnPaymentMode" })
                            </div>

                        }
                        <div class="col-md-2 form-group">
                            @Html.LabelFor(Model => Model.ManualSSRNo, new { @for = "ManualSSRNo" })
                            @Html.TextBoxFor(Model => Model.ManualSSRNo, new { @id = "ManualSSRNo", @name = "ManualSSRNo", @class = "form-control", @readonly = true })
                        </div>
                        <div class="col-md-4 form-group">
                            @Html.LabelFor(Model => Model.Remarks, new { @for = "Remarks" })
                            @Html.TextBoxFor(Model => Model.Remarks, new { @id = "Remarks", @name = "Remarks", @class = "form-control" })
                        </div>

                        @if (!IsEdit)
                        {
                            <div class="col-md-12">
                                <div class="pull-right">
                                    <br />
                                    <button type="submit" class="btn btn-primary" onclick="return Validation();">Continue</button>
                                    <a href="@Url.Action("index", "ExportInvoice")" class="btn btn-danger">Clear</a>
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    </div>
    @if (Model.ExportInvoiceID > 0)
    {
        <div class="row">
            <div class="box">
                <div class="box-header with-border">
                    <h4>Shiping Bill Details</h4>
                </div>
                <div class="box-body" style="overflow:auto;">
                    <table class="table table-bordered" style="white-space:nowrap;">
                        <thead>
                            <tr>
                                <th>SB No</th>
                                <th>SB Date</th>
                                <th>SB Packages</th>
                                <th>SB Pieces</th>
                                <th>SB Weight</th>
                                <th>Stuffed Pkgs</th>
                                <th>Stuffed Pieces</th>
                                <th>Stuffed Weight</th>
                                <th>CHA</th>
                                <th>Forwarder</th>
                                <th>Exporter</th>
                                <th>Sub Commodity</th>
                                <th>Cargo Name</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (Model.dtShipingDetails != null && Model.dtShipingDetails.Rows.Count > 0)
                            {
                                for (int i = 0; i < Model.dtShipingDetails.Rows.Count; i++)
                                {
                            <tr>
                                <td>@Model.dtShipingDetails.Rows[i]["SBNo"]</td>
                                @if (!string.IsNullOrEmpty(Model.dtShipingDetails.Rows[i]["SBDate"].ToString()))
                                {
                                    <td>@Convert.ToDateTime(Model.dtShipingDetails.Rows[i]["SBDate"]).ToString(CFS.Com.ClsCommon.CSProjectDateFormat)</td>
                                }
                                else
                                {
                                    <td></td>
                                }

                                <td>@Model.dtShipingDetails.Rows[i]["SBPkg"]</td>
                                <td>@Model.dtShipingDetails.Rows[i]["SBPieces"]</td>
                                <td>@Model.dtShipingDetails.Rows[i]["SBWt"]</td>
                                <td>@Model.dtShipingDetails.Rows[i]["StuffPkg"]</td>
                                <td>@Model.dtShipingDetails.Rows[i]["StuffPieces"]</td>
                                <td>@Model.dtShipingDetails.Rows[i]["StuffWt"]</td>
                                <td>@Model.dtShipingDetails.Rows[i]["CHAName"]</td>
                                <td>@Model.dtShipingDetails.Rows[i]["ForwarderName"]</td>
                                <td>@Model.dtShipingDetails.Rows[i]["ExporterNAME"]</td>
                                <td>@Model.dtShipingDetails.Rows[i]["SubCommodity"]</td>
                                <td>@Model.dtShipingDetails.Rows[i]["CargoDesc"]</td>
                            </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="box">
                <div class="box-header with-border">
                    <h4>IN-BOE Details:</h4>
                </div>
                <div class="box-body" style="overflow:auto;">
                    <table class="table table-bordered" style="white-space:nowrap;">
                        <thead>
                            <tr>
                                <th>NOC No</th>
                                <th>NOC Date</th>
                                <th>NOC Storage Valid Upto</th>
                                <th>In BOE No</th>
                                <th>In BOE Date</th>
                                <th>Bond No</th>
                                <th>Bond Date</th>
                                <th>CP No</th>
                                <th>CP Date</th>
                                <th>BL No</th>
                                <th>BL Date</th>
                                <th>IGM No</th>
                                <th>Item No</th>
                                <th>Hold Status</th>
                                <th>AV</th>
                                <th>Enhanced AV</th>
                                <th>DV</th>
                                <th>Enhanced DV</th>
                                <th>CHA</th>
                                <th>Forwarder</th>
                                <th>Consoler</th>
                                <th>Importer</th>
                                <th>Packages</th>
                                <th>Pieces</th>
                                <th>Weight</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (Model.dtInBOEDetails != null && Model.dtInBOEDetails.Rows.Count > 0)
                            {
                                decimal AV = 0, EAV = 0, DV = 0, EDV = 0;
                                for (int i = 0; i < Model.dtInBOEDetails.Rows.Count; i++)
                                {
                                    AV += Convert.ToDecimal(Model.dtInBOEDetails.Rows[i]["AssessableValue"]);
                                    EAV += Convert.ToDecimal(Model.dtInBOEDetails.Rows[i]["EnhanceAssembleValue"]);
                                    DV += Convert.ToDecimal(Model.dtInBOEDetails.Rows[i]["Dutyvalue"]);
                                    EDV += Convert.ToDecimal(Model.dtInBOEDetails.Rows[i]["EnhanceDutyvalue"]);
                                    <tr>
                                        <td>@Model.dtInBOEDetails.Rows[i]["NOCNo"]</td>
                                        <td>@Model.dtInBOEDetails.Rows[i]["NOCDate"]</td>
                                        <td>@Model.dtInBOEDetails.Rows[i]["NOCValidDate"]</td>
                                        <td>@Model.dtInBOEDetails.Rows[i]["InBOENo"]</td>
                                        <td>@Model.dtInBOEDetails.Rows[i]["InBOEDate"]</td>
                                        <td>@Model.dtInBOEDetails.Rows[i]["BondNo"]</td>
                                        <td>@Model.dtInBOEDetails.Rows[i]["BondDate"]</td>
                                        <td>@Model.dtInBOEDetails.Rows[i]["CPNo"]</td>
                                        <td>@Model.dtInBOEDetails.Rows[i]["CPDate"]</td>
                                        <td>@Model.dtInBOEDetails.Rows[i]["BLNo"]</td>
                                        <td>@Model.dtInBOEDetails.Rows[i]["BLDate"]</td>
                                        <td>@Model.dtInBOEDetails.Rows[i]["IGMNo"]</td>
                                        <td>@Model.dtInBOEDetails.Rows[i]["ItemNo"]</td>
                                        <td>@Model.dtInBOEDetails.Rows[i]["HoldStatus"]</td>
                                        <td>@Model.dtInBOEDetails.Rows[i]["AssessableValue"]</td>
                                        <td>@Model.dtInBOEDetails.Rows[i]["EnhanceAssembleValue"]</td>
                                        <td>@Model.dtInBOEDetails.Rows[i]["Dutyvalue"]</td>
                                        <td>@Model.dtInBOEDetails.Rows[i]["EnhanceDutyvalue"]</td>
                                        <td>@Model.dtInBOEDetails.Rows[i]["SubCHA"]</td>
                                        <td>@Model.dtInBOEDetails.Rows[i]["Forwarder"]</td>
                                        <td>@Model.dtInBOEDetails.Rows[i]["Consolidator"]</td>
                                        <td>@Model.dtInBOEDetails.Rows[i]["IMPORTERNAME"]</td>
                                        <td>@Model.dtInBOEDetails.Rows[i]["NOOFPKGS"]</td>
                                        <td>@Model.dtInBOEDetails.Rows[i]["NOOFPIECES"]</td>
                                        <td>@Model.dtInBOEDetails.Rows[i]["WEIGHT"]</td>
                                    </tr>
                                }
                                <tr><td colspan="14"></td><td>@AV</td><td>@EAV</td><td>@DV</td><td>@EDV</td><td colspan="7"></td></tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="box">
                <div class="box-header with-border">
                    <h4>Biiling Details</h4>
                    <div style="display: inline-flex">
                        <span class="badge bg-aqua" style="font-size:15px;"> 20 : @Model.noof20count</span>@CFS.Com.ClsCommon.AddhtmlSpace(3)
                        <span class="badge bg-aqua" style="font-size:15px;"> 40 : @Model.noof40count</span>@CFS.Com.ClsCommon.AddhtmlSpace(3)
                        <span class="badge bg-aqua" style="font-size:15px;"> 45 : @Model.noof45count</span>@CFS.Com.ClsCommon.AddhtmlSpace(3)
                    </div>
                </div>
                <div class="box-body" style="overflow:auto;">
                    <table class="table table-bordered" style="white-space:nowrap;">
                        <thead>
                            <tr>
                                <th>Cont No</th>
                                <th>Size</th>
                                <th>Type</th>
                                <th>Line</th>
                                <th>Stuff Date</th>
                                <th>SB No</th>
                                <th>Cargo Type</th>
                                <th>Bill Commodity</th>
                                <th>From Date</th>
                                <th>To Date</th>
                                <th>Weight</th>
                                <th>Billable Head</th>
                                <th>QTY</th>
                                <th>Rate</th>
                                <th>Taxable Amt</th>
                                <th>GST</th>
                                <th>GST Amt</th>
                                <th>Total Amt</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (Model.ConsolidatorChargeDatatable != null && Model.ConsolidatorChargeDatatable.Rows.Count > 0)
                            {
                                for (int i = 0; i < Model.ConsolidatorChargeDatatable.Rows.Count; i++)
                                {
                                    <tr>
                                        <td>@Model.ConsolidatorChargeDatatable.Rows[i]["ContainerNumber"]</td>
                                        <td>@Model.ConsolidatorChargeDatatable.Rows[i]["ISOCodeSize"]</td>
                                        <td>@Model.ConsolidatorChargeDatatable.Rows[i]["ISOCodeType"]</td>
                                        <td>@Model.ConsolidatorChargeDatatable.Rows[i]["Line"]</td>
                                        @if (!string.IsNullOrEmpty(Model.ConsolidatorChargeDatatable.Rows[i]["StuffDate"].ToString()))
                                        {
                                            <td>@CFS.Com.ClsCommon.ConvertDateNullToBlank(Convert.ToDateTime(Model.ConsolidatorChargeDatatable.Rows[i]["StuffDate"]))</td>
                                        }
                                        else
                                        {
                                            <td></td>
                                        }
                                        <td>@Model.ConsolidatorChargeDatatable.Rows[i]["SBNo"]</td>
                                        <td>@Model.ConsolidatorChargeDatatable.Rows[i]["CargoType"]</td>
                                        <td>@Model.ConsolidatorChargeDatatable.Rows[i]["BillCommodity"]</td>
                                        @if (!string.IsNullOrEmpty(Model.ConsolidatorChargeDatatable.Rows[i]["FromDate"].ToString()))
                                        {
                                            <td> @CFS.Com.ClsCommon.ConvertDateNullToBlank(Convert.ToDateTime(Model.ConsolidatorChargeDatatable.Rows[i]["FromDate"]))</td>
                                        }
                                        else
                                        {
                                            <td></td>
                                        }
                                        @if (!string.IsNullOrEmpty(@Model.ConsolidatorChargeDatatable.Rows[i]["ToDate"].ToString()))
                                        {
                                            <td>@CFS.Com.ClsCommon.ConvertDateNullToBlank(Convert.ToDateTime(Model.ConsolidatorChargeDatatable.Rows[i]["ToDate"]))</td>
                                        }
                                        else
                                        {
                                            <td></td>
                                        }
                                        <td>@Model.ConsolidatorChargeDatatable.Rows[i]["Weight"]</td>
                                        <td>@Model.ConsolidatorChargeDatatable.Rows[i]["TariffHead"]</td>
                                        <td>@Model.ConsolidatorChargeDatatable.Rows[i]["Qty"]</td>
                                        <td>@Convert.ToDecimal(Model.ConsolidatorChargeDatatable.Rows[i]["Rate"]).ToString("0.00")</td>
                                        <td>@Convert.ToDecimal(Model.ConsolidatorChargeDatatable.Rows[i]["TaxableAmount"]).ToString("0.00")</td>
                                        <td>@Convert.ToDecimal(Model.ConsolidatorChargeDatatable.Rows[i]["GST"]).ToString("0.00")</td>
                                        <td>@Convert.ToDecimal(Model.ConsolidatorChargeDatatable.Rows[i]["GSTAmount"]).ToString("0.00")</td>
                                        <td>@Convert.ToDecimal(Model.ConsolidatorChargeDatatable.Rows[i]["TotalAmount"]).ToString("0.00")</td>
                                    </tr>
                                }
                            }

                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="box">
                <div class="box-header with-border">
                    <h4>
                        <b> Discount Details </b>
                        <div class="pull-right">
                            <button type="button" class="btn btn-primary" onclick="openOtherTariff()">Add</button>
                        </div>
                    </h4>
                </div>
                @{ decimal TaxableAmount = 0, NetTaxableAmount = 0, GSTAmount = 0, DiscountAmount = 0, TotalAmount = 0, RoundOff = 0, NetAmount = 0; }
                <div class="box-body">
                    <div class="row">
                        <div class="col-md-12">
                            <table id="example2" style="white-space: nowrap" class="table-bordered table-hover">
                                <thead>
                                    <tr>
                                        <th>Tariff Head </th>
                                        <th>Taxable Amount </th>
                                        <th>Discount Amt </th>
                                        <th>Net Taxable Amount </th>
                                        <th>GST(%) </th>
                                        <th>GST Amount </th>
                                        <th>Net amount </th>
                                    </tr>
                                </thead>
                                <tbody id="ConsolidatedChargesDetails">
                                    @if (Model.DiscountDatatable != null && Model.DiscountDatatable.Rows.Count > 0)
                                    {
                                        <input type="hidden" id="DiscountDataTableCount" name="DiscountDataTableCount" value="@Model.DiscountDatatable.Rows.Count" />
                                        //decimal TaxableAmount = 0,GSTAmount=0, DiscountAmount = 0, TotalAmount = 0, RoundOff = 0, NetAmount = 0;
                                        for (int L = 0; L < Model.DiscountDatatable.Rows.Count; L++)
                                        {

                                            //Model.DiscountAmount[L] = Convert.ToDecimal(Model.DiscountDatatable.Rows[L]["Discount"]);
                                            TaxableAmount += Convert.ToDecimal(Model.DiscountDatatable.Rows[L]["TaxableAmount"]);
                                            NetTaxableAmount += Convert.ToDecimal(Model.DiscountDatatable.Rows[L]["TaxableAmount"]);
                                            GSTAmount += Convert.ToDecimal(Model.DiscountDatatable.Rows[L]["GSTAmount"]);
                                            DiscountAmount += 0;
                                            TotalAmount += Convert.ToDecimal(Model.DiscountDatatable.Rows[L]["TotalAmount"]);
                                            <tr>

                                                @*<input type="hidden" id="hdntrnSpaceCertificateGWID_@L" name="hdntrnSpaceCertificateGWID_@L" value="@Model.DiscountDatatable.Rows[L]["trnSpaceCertificateGWID"]">*@
                                                <input type="hidden" id="hdntrnExportStufingWOID_@L" name="hdntrnExportStufingWOID_@L" value="@Model.DiscountDatatable.Rows[L]["trnExportStufingWOID"]">
                                                <input type="hidden" id="hdnMstrTariffHeadID_@L" name="hdnMstrTariffHeadID_@L" value="@Model.DiscountDatatable.Rows[L]["TariffHeadID"]">
                                                <input type="hidden" id="hdnTariffHead_@L" name="hdnTariffHead_@L" value="@Model.DiscountDatatable.Rows[L]["TariffHead"]">
                                                <input type="hidden" id="hdnTaxableAmount_@L" name="hdnTaxableAmount_@L" value="@Model.DiscountDatatable.Rows[L]["TaxableAmount"]">
                                                <input type="hidden" id="hdnDiscount_@L" name="hdnDiscount_@L" value="">
                                                <input type="hidden" id="hdnNetTaxableAmount_@L" name="hdnNetTaxableAmount_@L" value="@Model.DiscountDatatable.Rows[L]["TaxableAmount"]">
                                                <input type="hidden" id="hdnGST" name="hdnGST_@L" value="@Model.DiscountDatatable.Rows[L]["GST"]">
                                                <input type="hidden" id="hdnGSTAmount_@L" name="hdnGSTAmount_@L" value="@Model.DiscountDatatable.Rows[L]["GSTAmount"]">
                                                <input type="hidden" id="hdnTotalAmount_@L" name="hdnTotalAmount_@L" value="@Model.DiscountDatatable.Rows[L]["TotalAmount"]">

                                                <td>@Model.DiscountDatatable.Rows[L]["TariffHead"]</td>
                                                <td id="txtTaxableAmount_@L">@(Convert.ToDecimal(Model.DiscountDatatable.Rows[L]["TaxableAmount"]).ToString("0.00"))</td>
                                                @*<td>@(Convert.ToDecimal(Model.DiscountDatatable.Rows[L]["Discount"]).ToString("0.00"))</td>*@
                                                <td>
                                                    <div class="form-group-sm">
                                                        @Html.TextBoxFor(Model => Model.DiscountAmount[L], new { @id = "DiscountAmount_" + L, @name = "DiscountAmount" + L, @class = "form-control", @placeholder = "Enter Discount Amount", @oninput = "NumberWithTwoDecimal(event,'DiscountAmount_" + L + "')", @onkeyup = "return CalcNetTaxableAmount('DiscountAmount_" + L + "')" })
                                                    </div>
                                                </td>
                                                <td id="txtNetTaxableAmount_@L">@(Convert.ToDecimal(Model.DiscountDatatable.Rows[L]["TaxableAmount"]).ToString("0.00"))</td>
                                                <td id="GSTPer_@L">@(Convert.ToDecimal(Model.DiscountDatatable.Rows[L]["GST"]).ToString("0.00"))</td>
                                                <td id="GSTAmt_@L">@(Convert.ToDecimal(Model.DiscountDatatable.Rows[L]["GSTAmount"]).ToString("0.00"))</td>
                                                <td id="NetAmt_@L">@(Convert.ToDecimal(Model.DiscountDatatable.Rows[L]["TotalAmount"]).ToString("0.00"))</td>
                                            </tr>
                                        }
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                    <br />
                    @if (Model.PaymentMode.ToLower() == "cash")
                    {

                        <div class="box-header with-border">
                            <h4>
                                <b> Receipt Details </b>
                            </h4>
                        </div>
                        <div class="row">
                            <div class="col-md-12">
                                <table id="example2" style="white-space: nowrap" class="table-bordered table-hover">
                                    <thead>
                                        <tr>
                                            <th>Mode Of Payment</th>
                                            <th>Amount</th>
                                            <th>Cheque/DD/NEFT NO</th>
                                            <th>Cheque/DD/NEFT Date</th>
                                            <th>Bank Details</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <tr>
                                            <td>@Html.DropDownListFor(model => model.PaymentModeOfReceipt, Model.SelectPaymentModeOfReceipt, new { @class = "form-control", @id = "PaymentModeOfReceipt", @name = "PaymentMode2" })</td>
                                            <td>@Html.TextBoxFor(Model => Model.AmountOfReceipt, new { @id = "AmountOfReceipt", @name = "AmountOfReceipt", @class = "form-control", @onkeypress = "return (event.charCode >= 48 && event.charCode <= 57 || (charCode >=45 &&  charCode <= 46))" })</td>
                                            <td>@Html.TextBoxFor(Model => Model.ChequeDDNeftNoOfReceipt, new { @id = "ChequeDDNeftNoOfReceipt", @name = "ChequeDDNeftNoOfReceipt", @class = "form-control", @placeholder = "Enter Cheque/DD/NEFT NO" })</td>
                                            <td>@Html.TextBoxFor(Model => Model.ChequeDDNeftDateOfReceipt, new { @id = "ChequeDDNeftDateOfReceipt", @name = "ChequeDDNeftDateOfReceipt", @class = "form-control DatePicker", @placeholder = "Enter Cheque/DD/NEFT Date"})</td>
                                            <td>@Html.TextBoxFor(Model => Model.BankDetailsOfReceipt, new { @id = "BankDetailsOfReceipt", @name = "BankDetailsOfReceipt", @class = "form-control", @placeholder = "Enter Bank Details" })</td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    }
                    <div class="box-body row">
                        <div class="table-responsive">
                            <table id="example4" class="table-bordered table-hover" style="float:right ;margin-left:3%">
                                <tbody>
                                    <tr class="text-right">
                                        <td><b> Taxable Amount :</b></td>
                                        <td id="FinalTaxableAmount">@(Convert.ToDecimal(TaxableAmount).ToString("0.00")) </td>
                                    </tr>
                                    <tr class="text-right">
                                        <td><b> Discount Amount :</b></td>
                                        <td id="FinalDiscountAmount">@(Convert.ToDecimal(DiscountAmount).ToString("0.00")) </td>
                                    </tr>
                                    <tr class="text-right">
                                        <td><b>Net Taxable Amount :</b></td>
                                        <td id="FinalNetTaxableAmount">@(Convert.ToDecimal(NetTaxableAmount).ToString("0.00")) </td>
                                    </tr>
                                    <tr class="text-right">
                                        <td><b> GST Amount :</b></td>
                                        <td id="FinalGSTAmount">@(Convert.ToDecimal(GSTAmount).ToString("0.00"))</td>
                                    </tr>
                                    <tr class="text-right">
                                        <td><b> Total Amount :</b></td>
                                        <td id="FinalTotalAmount">@(Convert.ToDecimal(TotalAmount).ToString("0.00")) </td>
                                    </tr>
                                    <tr class="text-right">
                                        <td><b> Round Amount :</b></td>
                                        <td id="FinalRoundAmount">@((Math.Round(Convert.ToDecimal(TotalAmount)) - Convert.ToDecimal(TotalAmount)).ToString("0.00")) </td>
                                    </tr>
                                    <tr class="text-right">
                                        <td><b> Net Amount :</b></td>
                                        <td id="FinalNetAmount">@(Math.Round(Convert.ToDecimal(TotalAmount)).ToString("0.00")) </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                    <div class="col-md-4 pull-right">
                        <div class="form-group pull-right">
                            <br>
                            <button type="button" id="btnFinalSave" onclick="return FinishedAllChanges()" @((!(Model.FinalTotal > 0)) ? "disabled='disabled;'" : "") class="btn btn-primary">Generate Export Invoice</button>
                            <a href="/ExportInvoice" class="btn btn-danger">Cancel</a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal fade in" id="AddOtherTariffHead" style="display: none; padding-right: 17px;" data-backdrop="static" data-keyboard="false">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" onclick="RefreshPage()" aria-label="Close">
                            <span aria-hidden="true">×</span>
                        </button>
                        <h4 class="modal-title">Add Other Tariff Head</h4>
                    </div>
                    <div class="modal-body">
                        <div class="row">
                            @Html.HiddenFor(Model => Model.OtherTariffDetails.ExportInvoiceOtherTariffDetailsID, new { @id = "ExportInvoiceOtherTariffDetailsID", @name = "ExportInvoiceOtherTariffDetailsID" })

                            <div class="col-md-5">
                                <div class="form-group">
                                    @Html.LabelFor(Model => Model.OtherTariffDetails.OtherTariffDetailsTariffHead)<span class="text-red">*</span> @Html.ValidationMessageFor(Model => Model.OtherTariffDetails.OtherTariffDetailsTariffHeadID, String.Empty, new { @id = "spn_OtherTariffDetailsTariffHeadID", @class = "help-inline text-red" })
                                    @Html.TextBoxFor(Model => Model.OtherTariffDetails.OtherTariffDetailsTariffHead, new { @id = "OtherTariffDetailsTariffHead", @name = "OtherTariffDetailsTariffHead", @class = "form-control", @placeholder = "Enter TariffHead" })
                                    @Html.HiddenFor(Model => Model.OtherTariffDetails.OtherTariffDetailsTariffHeadID, new { @id = "OtherTariffDetailsTariffHeadID", @name = "OtherTariffDetailsTariffHeadID" })
                                </div>
                            </div>
                        </div>
                        <div class="row col-md-12">
                            <div class="col-md-1">
                                <div class="form-group">
                                    @Html.LabelFor(Model => Model.OtherTariffDetails.OtherTariffDetailsQTY)<span class="text-red">*</span> @Html.ValidationMessageFor(Model => Model.OtherTariffDetails.OtherTariffDetailsQTY, String.Empty, new { @id = "spn_OtherTariffDetailsQTY", @class = "help-inline text-red" })
                                    @Html.TextBoxFor(Model => Model.OtherTariffDetails.OtherTariffDetailsQTY, new { @id = "OtherTariffDetailsQTY", @name = "OtherTariffDetailsQTY", @class = "form-control", @placeholder = "Enter QTY", @maxlength = "11", @onblur = "CalculateOtherTariffDetailsAMT()", @onkeypress = "return isNumberWithTwoDecimal(event,'OtherTariffDetailsQTY')" })
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="form-group">
                                    @Html.LabelFor(Model => Model.OtherTariffDetails.OtherTariffDetailsRate)<span class="text-red">*</span> @Html.ValidationMessageFor(Model => Model.OtherTariffDetails.OtherTariffDetailsRate, String.Empty, new { @id = "spn_OtherTariffDetailsRate", @class = "help-inline text-red" })
                                    @Html.TextBoxFor(Model => Model.OtherTariffDetails.OtherTariffDetailsRate, new { @id = "OtherTariffDetailsRate", @name = "OtherTariffDetailsRateRate", @class = "form-control", @placeholder = "Enter Rate", @maxlength = "11", @onblur = "CalculateOtherTariffDetailsAMT()", @onkeypress = "return isNumberWithTwoDecimal(event,'OtherTariffDetailsRate')" })
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="form-group">
                                    @Html.LabelFor(Model => Model.OtherTariffDetails.OtherTariffDetailsTotal) @Html.ValidationMessageFor(Model => Model.OtherTariffDetails.OtherTariffDetailsTotal, String.Empty, new { @id = "spn_OtherTariffDetailsTotal", @class = "help-inline text-red" })
                                    @Html.TextBoxFor(Model => Model.OtherTariffDetails.OtherTariffDetailsTotal, new { @id = "OtherTariffDetailsTotal", @name = "OtherTariffDetailsTotal", @class = "form-control", @placeholder = "Enter Total", @onblur = "CalculateOtherTariffDetailsAMT()", @readonly = "true" })
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="form-group">
                                    <input type="hidden" id="OtherTariffDetailsDiscountBase" />
                                    <input type="hidden" id="OtherTariffDetailsRateBase" />
                                    @Html.LabelFor(Model => Model.OtherTariffDetails.OtherTariffDetailsDiscount) @Html.ValidationMessageFor(Model => Model.OtherTariffDetails.OtherTariffDetailsDiscount, String.Empty, new { @id = "spn_OtherTariffDetailsOtherTariffDetailsDiscount", @class = "help-inline text-red" })
                                    @Html.TextBoxFor(Model => Model.OtherTariffDetails.OtherTariffDetailsDiscount, new { @id = "OtherTariffDetailsDiscount", @name = "OtherTariffDetailsDiscount", @class = "form-control", @placeholder = "Enter Discount ", @onblur = "CalculateOtherTariffDetailsAMT()", @maxlength = "11", @onkeypress = "return isNumberWithTwoDecimal(event,'OtherTariffDetailsDiscount')" })
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="form-group">
                                    @Html.LabelFor(Model => Model.OtherTariffDetails.OtherTariffDetailsDiscountamt) @Html.ValidationMessageFor(Model => Model.OtherTariffDetails.OtherTariffDetailsDiscountamt, String.Empty, new { @id = "spn_OtherTariffDetailsOtherTariffDetailsDiscountamt", @class = "help-inline text-red" })
                                    @Html.TextBoxFor(Model => Model.OtherTariffDetails.OtherTariffDetailsDiscountamt, new { @id = "OtherTariffDetailsDiscountamt", @name = "OtherTariffDetailsDiscountamt", @class = "form-control", @placeholder = "Enter Discount Amt", @maxlength = "11", @readonly = true })
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="form-group">

                                    @Html.LabelFor(Model => Model.OtherTariffDetails.OtherTariffDetailsTaxableAmount) @Html.ValidationMessageFor(Model => Model.OtherTariffDetails.OtherTariffDetailsTaxableAmount, String.Empty, new { @id = "spn_OtherTariffDetailsOtherTariffDetailsTaxableAmount", @class = "help-inline text-red" })
                                    @Html.TextBoxFor(Model => Model.OtherTariffDetails.OtherTariffDetailsTaxableAmount, new { @id = "OtherTariffDetailsTaxableAmount", @name = "OtherTariffDetailsTaxableAmount", @class = "form-control", @placeholder = "Enter Discount Amt", @maxlength = "11", @readonly = true })
                                </div>
                            </div>
                            <div class="col-md-1">
                                <div class="form-group">
                                    @Html.LabelFor(Model => Model.OtherTariffDetails.OtherTariffDetailsGSTPer) @Html.ValidationMessageFor(Model => Model.OtherTariffDetails.OtherTariffDetailsGSTPer, String.Empty, new { @id = "spn_OtherTariffDetailsGSTPer", @class = "help-inline text-red" })
                                    @Html.TextBoxFor(Model => Model.OtherTariffDetails.OtherTariffDetailsGSTPer, new { @id = "OtherTariffDetailsGSTPer", @name = "OtherTariffDetailsGSTPer", @class = "form-control", @placeholder = "Enter GST(%)", @onblur = "CalculateOtherTariffDetailsAMT()", @maxlength = "11", @onkeypress = "return isNumberWithTwoDecimal(event,'OtherTariffDetailsGSTPer')" })
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="form-group">
                                    @Html.LabelFor(Model => Model.OtherTariffDetails.OtherTariffDetailsGSTAmount) @Html.ValidationMessageFor(Model => Model.OtherTariffDetails.OtherTariffDetailsGSTAmount, String.Empty, new { @id = "spn_OtherTariffDetailsGSTAmount", @class = "help-inline text-red" })
                                    @Html.TextBoxFor(Model => Model.OtherTariffDetails.OtherTariffDetailsGSTAmount, new { @id = "OtherTariffDetailsGSTAmount", @name = "OtherTariffDetailsGSTAmount", @class = "form-control", @placeholder = "Enter GST(%)", @maxlength = "11", @readonly = true })
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="form-group">
                                    @Html.LabelFor(Model => Model.OtherTariffDetails.OtherTariffDetailsNetAmount) @Html.ValidationMessageFor(Model => Model.OtherTariffDetails.OtherTariffDetailsNetAmount, String.Empty, new { @id = "spn_OtherTariffDetailsNetAmount", @class = "help-inline text-red" })
                                    @Html.TextBoxFor(Model => Model.OtherTariffDetails.OtherTariffDetailsNetAmount, new { @id = "OtherTariffDetailsNetAmount", @name = "OtherTariffDetailsNetAmount", @class = "form-control", @readonly = "true" })
                                </div>
                            </div>
                        </div>
                        <div class="col-md-12 pull-right">
                            <div class="form-group pull-right">
                                <br />
                                <button type="button" onclick="return AddExportInvoiceOtherTariffDetails()" id="btnOtherTariffDetails" class="btn btn-primary">Add</button>
                                <a onclick="ClearExportInvoiceOtherTariffDetails()" class="btn btn-danger">Clear</a>
                            </div>
                        </div>
                        <div class="col-md-12" style="overflow: scroll;">
                            <table id="example2" style="white-space: nowrap" class="table-bordered table-hover">
                                <thead>
                                    <tr>
                                        <th>Tariff Head </th>
                                        <th>Qty </th>
                                        <th>Rate </th>
                                        <th>Total</th>
                                        <th>Discount </th>
                                        <th>Discount Amount </th>
                                        <th>Taxable Amount </th>
                                        <th>GST (%) </th>
                                        <th>GST Amount </th>
                                        <th>Net Amount </th>
                                        <th class="freezeLastColumn">Action </th>
                                    </tr>
                                </thead>
                                <tbody id="OtherTariffDetailsDetails"></tbody>
                            </table>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-default pull-right" onclick="RefreshPage()" data-dismiss="modal">Close</button>
                    </div>
                </div>
                <!-- /.modal-content -->
            </div>
            <!-- /.modal-dialog -->
        </div>
    }
</section>
}
<script>
    var VCNDeatails = '@Model.HtmlVCNDeatails';
    var IsSearch = '@Model.IsSearch.ToString().ToLower()';


    function FinishedAllChanges() {

        $.ajax({
            url: GetRootPath + "ExportInvoice/FinishedAllChanges",
            type: "Post",
            data: $("form").serialize(),
            dataType: "text",
            async: false,
            success: function (data) {
                window.location = GetRootPath + "ExportInvoice/index";
            }
        });
    }
    function getRoundOffAmount(amount) {
        amount = parseFloat(amount).toFixed(2);
        var amt = 0;
        if ((amount) - Math.floor(amount) > 0.50) {
            amt = 1 - ((amount) - Math.floor(amount));
        }
        else {
            amt = -((amount) - Math.floor(amount));
        }
        return amt;
    }

    function CalcNetTaxableAmount(ID) {
        debugger;
        var SplitID = ID.split("_");
        $("#" + ID).removeClass("redborder");
        var DiscountAmount = $("#" + ID).val();
        var TaxableAmount = $("#txtTaxableAmount_" + SplitID[1]).text();
        var GSTPer = $("#GSTPer_" + SplitID[1]).text();
        var GSTAmount = $("#GSTAmt_" + SplitID[1]).text();
        var TotalAmount = $("#NetAmt_" + SplitID[1]).text();

        if (DiscountAmount != "" && DiscountAmount != null && DiscountAmount != undefined) {
            if (parseFloat(DiscountAmount) > parseFloat(TaxableAmount)) {
                TosterAlert("error", "Please add less discount amount than taxable amount", "Error!");
                $("#" + ID).addClass("redborder");
                $("#" + ID).val("0.00");
            }
            else {
                var NetTaxableAmount = parseFloat(TaxableAmount) - parseFloat(DiscountAmount);
                var GSTAmt = ((parseFloat(NetTaxableAmount) * parseFloat(GSTPer)) / 100).toFixed(2);
                var TotalAmt = (parseFloat(NetTaxableAmount) + parseFloat(GSTAmt)).toFixed(2);
                $("#txtNetTaxableAmount_" + SplitID[1]).text(parseFloat(NetTaxableAmount).toFixed(2));
                $("#GSTAmt_" + SplitID[1]).text(GSTAmt);
                $("#NetAmt_" + SplitID[1]).text(TotalAmt);

                $("#hdnDiscount_" + SplitID[1]).val(parseFloat(DiscountAmount).toFixed(2));
                $("#hdnNetTaxableAmount_" + SplitID[1]).val(parseFloat(NetTaxableAmount).toFixed(2));
                $("#hdnGSTAmount_" + SplitID[1]).val(GSTAmt);
                $("#hdnTotalAmount_" + SplitID[1]).val(TotalAmt);
            }
        }
        else {
            DiscountAmount = 0;
            var NetTaxableAmount = parseFloat(TaxableAmount) - parseFloat(DiscountAmount);
            var GSTAmt = ((parseFloat(NetTaxableAmount) * parseFloat(GSTPer)) / 100).toFixed(2);
            var TotalAmt = (parseFloat(NetTaxableAmount) + parseFloat(GSTAmt)).toFixed(2);
            $("#txtNetTaxableAmount_" + SplitID[1]).text(parseFloat(NetTaxableAmount).toFixed(2));
            $("#GSTAmt_" + SplitID[1]).text(GSTAmt);
            $("#NetAmt_" + SplitID[1]).text(TotalAmt);

            $("#hdnDiscount_" + SplitID[1]).val(parseFloat(DiscountAmount).toFixed(2));
            $("#hdnNetTaxableAmount_" + SplitID[1]).val(parseFloat(NetTaxableAmount).toFixed(2));
            $("#hdnGSTAmount_" + SplitID[1]).val(GSTAmt);
            $("#hdnTotalAmount_" + SplitID[1]).val(TotalAmt);
        }

        var DiscountDataTableCount = $("#DiscountDataTableCount").val();
        var FinalTaxableAmount = 0;
        var FinalDiscountAmount = 0;
        var FinalNetTaxableAmount = 0;
        var FinalGSTAmount = 0;
        var FinalTotalAmount = 0;
        for (var i = 0; i < DiscountDataTableCount; i++) {
            TaxableAmountOfThis = $("#txtTaxableAmount_" + i).text();
            DiscountAmountofThis = $("#DiscountAmount_" + i).val();
            if (DiscountAmountofThis == "" || DiscountAmountofThis == undefined || DiscountAmountofThis == null) {
                DiscountAmountofThis = 0;
            }
            NetTaxableAmountofThis = $("#txtNetTaxableAmount_" + i).text();
            GSTAmtofThis = $("#GSTAmt_" + i).text();
            NetAmtofThis = $("#NetAmt_" + i).text();
            FinalTaxableAmount = (parseFloat(FinalTaxableAmount) + parseFloat(TaxableAmountOfThis)).toFixed(2);
            FinalDiscountAmount = (parseFloat(FinalDiscountAmount) + parseFloat(DiscountAmountofThis)).toFixed(2);
            FinalNetTaxableAmount = (parseFloat(FinalNetTaxableAmount) + parseFloat(NetTaxableAmountofThis)).toFixed(2);
            FinalGSTAmount = (parseFloat(FinalGSTAmount) + parseFloat(GSTAmtofThis)).toFixed(2);
            FinalTotalAmount = (parseFloat(FinalTotalAmount) + parseFloat(NetAmtofThis)).toFixed(2);
        }

        $("#FinalTaxableAmount").text(FinalTaxableAmount);
        $("#FinalDiscountAmount").text(FinalDiscountAmount);
        $("#FinalNetTaxableAmount").text(FinalNetTaxableAmount);
        $("#FinalGSTAmount").text(FinalGSTAmount);
        $("#FinalTotalAmount").text(FinalTotalAmount);
        var RoundAmount = $("#FinalRoundAmount").text();
        var FinalRoundOffAmount = getRoundOffAmount(FinalTotalAmount);
        $("#FinalRoundAmount").text(parseFloat(FinalRoundOffAmount).toFixed(2));
        var FinalNetAmountAfterRoundOff = (parseFloat(FinalTotalAmount) + parseFloat(FinalRoundOffAmount)).toFixed(2);
        $("#FinalNetAmount").text(parseFloat(FinalNetAmountAfterRoundOff).toFixed(2));
        if (parseFloat($("#FinalNetAmount").text()) == 0) {
            $("#btnFinalSave").attr("disabled", "disabled");            
        }
        else {
            $("#btnFinalSave").removeAttr("disabled", "disabled");            
        }
    }
</script>
@if (((Model != null && Model.doaction.ToLower() == "edit") || Model.ExportInvoiceID > 0))
{
    <script>
        $(".isDisplayOnlyinEdit").show();
    </script>
}
else
{
    <script>
        $(".isDisplayOnlyinEdit").hide();
    </script>
}
<style>

    .bootstrap-datetimepicker-widget table td,
    .bootstrap-datetimepicker-widget table th {
        color: #212121 !important;
        border-color: white !important;
    }

    .bootstrap-datetimepicker-widget table th {
        background-color: white !important;
    }

    .bootstrap-datetimepicker-widget table td.active {
        color: white !important;
    }
</style>
<script src="@CFS.Com.ClsCommon.GetCacheVersion("FormJs/ExportInvoice.js")"></script>
